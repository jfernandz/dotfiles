#!/bin/bash

red=$(tput setaf 1)
green=$(tput setaf 2)
reset=$(tput sgr0)
bold=$(tput bold)

shopt -s nullglob

usage () {
	printf '\nThis script will install available dotfiles into your home folder.\n'
	printf 'Available distros are:\n\n'
	if [[ ! -d dotfiles ]]; then
		printf '\tNo dotfiles folder found.\n\n'
	elif pushd dotfiles &>/dev/null; then
		distros=( * )
		if (( ${#distros[@]} )); then
			printf '\t* %s\n' "${distros[@]}"
		else
			printf '\tNo distributions found.\n'
		fi
		popd &>/dev/null || exit
	fi
	printf '\nListed *_root folders are intended for /root folder.\n'
	printf 'so they must be "stowed" by the root user, %s%sbut you\n' "$red" "$bold"
	printf 'will have to clone the whole repo in /root folder\n'
	printf 'and run tis script from there.%s\n\n' "$reset"
	printf '	%s%sUsage: %s [-h] [-D|-S|-R] <distro>%s' "$bold" "$green" "$(basename "$0")" "$reset"
	printf '\n\n'
	stow -h
	exit 1
}

# TODO: check if stow is installed

run_stow () {
	printf "\n%sRunning: stow -v -t ~/ -d dotfiles/ %s %s%s\n" "$red" "$@" "$reset"
	#stow -v -t "$HOME" -d dotfiles/ "$@"
	printf "%sFinished%s\n" "$green" "$reset"
}

verify_context () {
	if [[ 
		$EUID == 0 && $1 == ?*_root || 
		$EUID != 0 && $1 != ?*_root 
				]] && [[ 
				$PWD == "$HOME"?(/*) 
				]]; then
		return 0
	else
		usage
	fi
}

if [[ $# == 1 ]]; then
	if [[ $1 != ?(-h) ]]; then
		# I know these kind of conditions are so week.
		verify_context "$1"
		run_stow "$@"	
	else
		usage
	fi
elif [[ $# == 2 ]]; then
	echo "$1$2"
	if [[ "$1$2" != ?*-h* ]]; then
		# Of course this won't work with directories starting with '-h' because
		# stow-home -S -- -hwatever 
		# won't match this condition, so it will print usage; but I don't care.
		verify_context "$2"
		run_stow "$@"
	else
		usage
	fi
else
	usage
fi
